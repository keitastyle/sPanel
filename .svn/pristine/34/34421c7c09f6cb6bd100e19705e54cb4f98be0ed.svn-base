package com.spanel.dao;

import com.spanel.beans.Exam;

import java.sql.*;

import static com.spanel.dao.DAOUtilitary.initPreparedStatement;
import static com.spanel.dao.DAOUtilitary.silentClose;

/**
 * Created by Joel on 02/01/2017.
 */
public class ExamDAOImpl implements ExamDAO {
    private DAOFactory daoFactory;

    private final static String SQL_INSERT =
            "INSERT INTO exams (affectation_id, date, type, room, description) " +
            "VALUES (?,?,?,?,?)";
    private final static String SQL_SELECT_IN_CLASS_AT_DATE_BY_ID =
            "SELECT * FROM exams WHERE affectation_id IN (" +
                    "SELECT id FROM affectations WHERE class_module_id IN (" +
                            "SELECT id FROM class_module WHERE class_id = ?" +
                    ")" +
            ") AND date = ?";


    ExamDAOImpl(DAOFactory daoFactory){
        this.daoFactory=daoFactory;
    }

    @Override
    public void create(Exam exam) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGenerateValues = null;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement( connection, SQL_INSERT, true, exam.getAffectationId(), exam.getDate(), exam.getType(), exam.getRoom(), exam.getDescription());
            int state = preparedStatement.executeUpdate();
            if ( state == 0 ) {
                throw new DAOException( "Echec de la création de l'examen, aucune ligne ajoutée à la table." );
            }
            autoGenerateValues = preparedStatement.getGeneratedKeys();
            if ( autoGenerateValues.next() ) {
                exam.setId( autoGenerateValues.getLong( 1 ) );
            } else {
                throw new DAOException( "Echec de la création de l'examen, aucun ID auto-généré retourné." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            silentClose( autoGenerateValues, preparedStatement, connection );
        }
    }

    @Override
    public Exam find(Long classId, Timestamp date) throws DAOException {
        return find(SQL_SELECT_IN_CLASS_AT_DATE_BY_ID, classId, date);
    }

    private Exam find(String sql, Object... objects ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        Exam exam = null;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement( connection, sql, false, objects );
            resultSet = preparedStatement.executeQuery();
            if ( resultSet.next() ) {
                exam = map( resultSet );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            silentClose( resultSet, preparedStatement, connection );
        }

        return exam;
    }

    public static Exam map(ResultSet resultSet) throws SQLException{
        Exam exam = new Exam();
        exam.setId(resultSet.getLong("id"));
        exam.setAffectationId(resultSet.getLong("affectation_id"));
        exam.setDate(resultSet.getTimestamp("date"));
        exam.setType(resultSet.getString("type"));
        exam.setRoom(resultSet.getString("room"));
        exam.setDescription(resultSet.getString("description"));
        return exam;
    }
}
