package com.spanel.dao;

import com.spanel.beans.File;

import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import static com.spanel.dao.DAOUtilitary.initPreparedStatement;
import static com.spanel.dao.DAOUtilitary.silentClose;

/**
 * Created by koria on 30/12/2016.
 */
public class FileDAOlmpl implements FileDao {
    private DAOFactory daoFactory;
    public FileDAOlmpl(DAOFactory daoFactory){
        this.daoFactory = daoFactory;
    }
    private static String SQL_INSERT="INSERT INTO files(author_id,name,path,date) VALUES(?,?,?,?)";
    private static String SQL_FIND_SCHEDULE_BY_PATH ="SELECT id,author_id,name,path,date FROM files WHERE id IN(SELECT MAX(id) FROM files WHERE type=\"schedule\")  ";
    private static String SQL_FIND_PROFILE_PICTURE ="SELECT id,author_id,name,path,date FROM files WHERE  type=\"profilePicture\"";
    private static String SQL_FIND_BY_ID ="SELECT id,author_id,name,path,date FROM files WHERE id=? ";
    private static String SQL_FIND_ALL_SCHEDULES ="SELECT files.id,files.author_id,files.name,files.path,files.date FROM files WHERE files.id IN(SELECT file_id FROM schedules) ORDER BY id DESC ";

    @Override
    public File create(File file) throws DAOException {
        java.sql.Connection connection = null;
        java.sql.PreparedStatement preparedStatement = null;
        ResultSet AutoGeneratedValue = null;
        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(connection, SQL_INSERT, true, file.getAuthorId(),  file.getName(), file.getPath(), file.getDate());
            int status = preparedStatement.executeUpdate();
            if (status == 0) {
                throw new DAOException("Failed to create file in database,No id auto generated value  ");
            }
            AutoGeneratedValue = preparedStatement.getGeneratedKeys();
            if (AutoGeneratedValue.next()) {
                file.setId(AutoGeneratedValue.getLong(1));
            } else {
                throw new DAOException("Failed to create file in database,No id auto generated value  ");

            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClose(preparedStatement);
            silentClose(AutoGeneratedValue);
            silentClose(connection);
        }
        return file;
    }



    @Override
    public void delete(Long id) throws DAOException {

    }

    @Override
    public File findById(Long id) throws DAOException {
        return find(SQL_FIND_BY_ID,id);
    }

    @Override
    public File find(String sql, Object... objects) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
       File file = null;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement( connection, sql, false, objects );
            resultSet = preparedStatement.executeQuery();
            if ( resultSet.next() ) {
               file = map( resultSet );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            silentClose( resultSet, preparedStatement, connection );
        }

        return file;
    }


    @Override
    public File findProfilePicture() throws DAOException {
        java.sql.Connection connection =null;
        java.sql.PreparedStatement preparedStatement =null;
        ResultSet resultSet = null ;
        File file = null;
        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(connection,SQL_FIND_PROFILE_PICTURE,false);
            resultSet = preparedStatement.executeQuery();
            if(resultSet.next()){
                file = map(resultSet);
            }
        }catch (SQLException e){
            throw new DAOException(e);
        }
        return file;
    }

    @Override
    public File findByMaxId() throws DAOException {
        java.sql.Connection connection =null;
        java.sql.PreparedStatement preparedStatement =null;
        ResultSet resultSet = null ;
        File file = null;
        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(connection,SQL_FIND_SCHEDULE_BY_PATH,false);
            resultSet = preparedStatement.executeQuery();
            if(resultSet.next()){
                file = map(resultSet);
            }else {
                file = new File();
                file.setName("default");
                file.setClassId(Long.parseLong("1"));
                file.setAuthorId(Long.parseLong("1"));
                file.setPath("assets/uploads/img/b.jpg");
                file.setDate(Date.valueOf(LocalDate.now()));

            }
        }catch (SQLException e){
            throw new DAOException(e);
        }
        return file;
    }
    @Override
    public List<File> findAllSchedules() throws DAOException{
        return findMany(SQL_FIND_ALL_SCHEDULES);
    }
    public List<File> findMany(String sql, Object... objects) throws DAOException {
        List<File> files = new ArrayList<>();

        java.sql.Connection connection = null;
        java.sql.PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            connection=daoFactory.getConnection();
            preparedStatement=initPreparedStatement(connection,sql,false,objects);
            resultSet=preparedStatement.executeQuery();
            while (resultSet.next()) {
                files.add(map(resultSet));
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClose(resultSet, preparedStatement, connection);
        }

        return files;
    }
    public static File map( ResultSet resultSet ) throws SQLException {
        File file= new File();
        file.setId( resultSet.getLong( 1 ) );
        file.setAuthorId(resultSet.getLong(2));
        file.setName( resultSet.getString( 3) );
        file.setPath(resultSet.getString(4));
        file.setDate(resultSet.getDate(5));

        return file;
    }
}
