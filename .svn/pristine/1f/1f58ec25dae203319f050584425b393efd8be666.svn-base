package com.spanel.dao;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.spanel.beans.Module;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;


import static com.spanel.dao.DAOUtilitary.initPreparedStatement;
import static com.spanel.dao.DAOUtilitary.silentClose;

/**
 * Created by koria on 04/12/2016.
 */
public class ModuleDAOImpl implements ModuleDAO {

    private static final String SQL_INSERT="INSERT INTO modules(name) VALUES(?)";
    private static final String SQL_FIND_ALL="SELECT * FROM modules";
    private static final String SQL_FIND_BY_NAME ="SELECT * FROM modules WHERE name=?";

    private DAOFactory daoFactory;

    ModuleDAOImpl(DAOFactory daoFactory){ this.daoFactory=daoFactory;}

    @Override
    public void create(Module module) throws DAOException {
        Connection connection=null;
        PreparedStatement preparedStatement=null;
        ResultSet autoGeneratedValue=null;
        try {
            connection= (Connection) daoFactory.getConnection();
            preparedStatement = (PreparedStatement) initPreparedStatement(connection, SQL_INSERT, true, module.getName());
            int status = preparedStatement.executeUpdate();
            if (status==0){
                throw new DAOException("Erreur lors de la création du module, aucune nouvelle ligne n'a été ajoutée !");
            }
            autoGeneratedValue=preparedStatement.getGeneratedKeys();
            if(autoGeneratedValue.next()){
                module.setId(autoGeneratedValue.getLong(1));
            }else {
                throw new DAOException("Echec de la création du module");
            }
        }catch(SQLException e){
            throw new DAOException(e);
        }finally {
            silentClose(preparedStatement);
            silentClose(autoGeneratedValue);
            silentClose(connection);
        }
    }

    @Override
    public void update(Long id) throws DAOException {

    }

    @Override
    public Module find(Long id) throws DAOException {
        return null;
    }

    public Module find (String name)
    {
        return find(SQL_FIND_BY_NAME,name);
    }

    @Override
    public List<Module> findAll() throws DAOException {
        return findMany(SQL_FIND_ALL);
    }

    private Module find(String sql, Object... objects ) throws DAOException{
        java.sql.Connection connection = null;
        java.sql.PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        Module module = null;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement( connection, sql, false, objects );
            resultSet = preparedStatement.executeQuery();
            if ( resultSet.next() ) {
                module = map(resultSet) ;
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            silentClose( resultSet, preparedStatement, connection );
        }

        return module;
    }

    private List<Module> findMany(String sql, Object... objects ) throws DAOException{
        java.sql.Connection connection = null;
        java.sql.PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        List<Module> modules = new ArrayList<>();

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement( connection, sql, false, objects );
            resultSet = preparedStatement.executeQuery();
            while ( resultSet.next() ) {
                modules.add(map( resultSet )) ;
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            silentClose( resultSet, preparedStatement, connection );
        }

        return modules;
    }

    public static Module map( ResultSet resultSet ) throws SQLException {
        Module module= new Module();
        module.setId( resultSet.getLong( 1 ) );
        module.setName( resultSet.getString( 2 ) );
        return module;
    }
}
