package com.spanel.dao;

import com.spanel.beans.Class;
import com.spanel.beans.Professor;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import static com.spanel.dao.DAOUtilitary.initPreparedStatement;
import static com.spanel.dao.DAOUtilitary.silentClose;

/**
 * Created by koria on 04/12/2016.
 */
public class ClassDAOImpl implements ClassDAO {

    private static final String SQL_INSERT = "INSERT INTO classes(name, department_id) VALUES(?,?)";
    private static final String SQL_FIND_BY_ID = "SELECT id,name,department_id FROM classes WHERE id= ?";
    private static final String SQL_FIND_BY_NAME = "SELECT id,name,department_id FROM classes WHERE name= ?";
    private static final String SQL_FIND_ALL = "SELECT id, name, department_id FROM classes";
    private static final String SQL_FIND_PROFESSOR_CLASSES = "SELECT classes.id, classes.name, classes.department_id FROM classes, affectations WHERE affectations.professor_id = ? AND affectations.class_module_id IN (SELECT id FROM class_module WHERE class_id = classes.id)";

    private DAOFactory daoFactory;

    ClassDAOImpl(DAOFactory daoFactory){
        this.daoFactory = daoFactory;
    }
    @Override
    public void create(Class classroom) throws DAOException {
        Connection connection=null;
        PreparedStatement preparedStatement=null;
        ResultSet AutoGeneratedValue=null;
        try {
            connection= daoFactory.getConnection();
            preparedStatement=initPreparedStatement( connection, SQL_INSERT, true, classroom.getName(), classroom.getDepartmentId() );
            int status=preparedStatement.executeUpdate();
            if (status==0){
                throw new DAOException("Erreur lors de la création de la classroom, aucune nouvelle ligne n'a été ajoutée !");
            }
            AutoGeneratedValue=preparedStatement.getGeneratedKeys();
            if(AutoGeneratedValue.next()){
                classroom.setId(AutoGeneratedValue.getLong(1));
            }else {
                System.out.println("erreur à ce niveau");
                throw new DAOException("Echec de la création du classroom");
            }
        }catch(SQLException e){
            throw new DAOException(e);
        }finally {
            silentClose(preparedStatement);
            silentClose(AutoGeneratedValue);
            silentClose(connection);
        }

    }

    @Override
    public void update(Long id) throws DAOException {

    }

    @Override
    public Class find(Long id) throws DAOException {
        return findOne(SQL_FIND_BY_ID,id);
    }

    public Class find(String name) throws DAOException {
        return findOne(SQL_FIND_BY_NAME,name);
    }

    @Override
    public List<Class> findAll() throws DAOException {
        return findMany(SQL_FIND_ALL);
    }

    @Override
    public List<Class> findAll(Professor professor) throws DAOException {
        return findMany(SQL_FIND_PROFESSOR_CLASSES, professor.getId());
    }

    @Override
    public List<Class> findAll(Long professorId) throws DAOException {
        return findMany(SQL_FIND_PROFESSOR_CLASSES, professorId);
    }

    @Override
    public Class findByName(String classe) {
        return null;
    }

    private List<Class> findMany(String sql, Object... objects ) throws DAOException{
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        List<Class> classrooms = new ArrayList<>();

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement( connection, sql, false, objects );
            resultSet = preparedStatement.executeQuery();
            while ( resultSet.next() ) {
                classrooms.add(map( resultSet )) ;
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            silentClose( resultSet, preparedStatement, connection );
        }

        return classrooms;
    }


    private Class findOne (String sql, Object... objects ) throws DAOException{

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        Class classroom = null;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement( connection, sql, false, objects );
            resultSet = preparedStatement.executeQuery();
            if ( resultSet.next() ) {
                classroom=ClassDAOImpl.map(resultSet) ;
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            silentClose( resultSet, preparedStatement, connection );
        }

        return classroom;

    }

    public static Class map( ResultSet resultSet ) throws SQLException {
        Class classroom = new Class();
        classroom.setId( resultSet.getLong( "id" ) );
        classroom.setName( resultSet.getString( "name" ) );
        classroom.setDepartmentId( resultSet.getLong( "department_id" ) );
        return classroom;
    }
}
