package com.spanel.dao;

;
import com.spanel.beans.Professor;
import com.spanel.beans.User;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import static com.spanel.dao.DAOUtilitary.initPreparedStatement;
import static com.spanel.dao.DAOUtilitary.silentClose;

/**
 * Created by Joel on 06/12/2016.
 */
public class ProfessorDAOImpl implements ProfessorDAO {
    private DAOFactory daoFactory;

    ProfessorDAOImpl(DAOFactory daoFactory){
        this.daoFactory = daoFactory;
    }

    private static final String SQL_INSERT="INSERT INTO professors(department_id,grade) VALUES(?,?)";

    private static final String SQL_SELECT_BY_ID = "SELECT id, department_id, grade FROM professors WHERE id=?";
    private static final String SQL_SELECT_BY_NAME = "SELECT professors.id, professors.department_id, professors.grade FROM professors, users WHERE CONCAT(first_name, ' ', last_name) =  ?";
    private static final String SQL_SELECT_ALL = "SELECT id, department_id, grade FROM professors";


    @Override
    public void create(Professor professor) throws DAOException {
        Connection connection=null;
        PreparedStatement preparedStatement=null;
        ResultSet AutoGeneratedValue=null;
        try {
            connection= daoFactory.getConnection();
            preparedStatement=initPreparedStatement( connection, SQL_INSERT, true, professor.getDepartmentId(), professor.getGrade() );
            int status=preparedStatement.executeUpdate();
            if (status==0){
                throw new DAOException("Failed to create Professor,No rows have been added to the table ");
            }
            AutoGeneratedValue=preparedStatement.getGeneratedKeys();
            if(AutoGeneratedValue.next()){
                professor.setId(AutoGeneratedValue.getLong(1));
            }else {
                throw new DAOException("Failed to create Professor in database,No id auto generated value  ");
            }
        }catch(SQLException e){
            throw new DAOException(e);
        }finally {
            silentClose(preparedStatement);
            silentClose(AutoGeneratedValue);
            silentClose(connection);
        }
    }

    @Override
    public Professor find(Long id) throws DAOException {
        return find(SQL_SELECT_BY_ID, id);
    }

    @Override
    public Professor find(User user) throws DAOException {
        if(user.isProfessor()) return find(user.getUserableId());
        return null;
    }

    public List<Professor> findAll() throws DAOException {
        return findMany(SQL_SELECT_ALL);
    }
    public List<Professor> findMany(String sql, Object... objects) throws DAOException {
        List<Professor> list = new ArrayList<>();

        java.sql.Connection connection = null;
        java.sql.PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(connection, sql, false, objects);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                list.add(map(resultSet));

            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClose(resultSet, preparedStatement, connection);
        }

        return list;
    }

    private Professor find(String sql, Object... objects ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        Professor professor = null;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement( connection, sql, false, objects );
            resultSet = preparedStatement.executeQuery();
            if ( resultSet.next() ) {
                professor = map( resultSet );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            silentClose( resultSet, preparedStatement, connection );
        }

        return professor;
    }
    public Professor findByName(String name) throws DAOException {
        return find(SQL_SELECT_BY_NAME, name);
    }

    public static Professor map(ResultSet resultSet ) throws SQLException {
        Professor professor = new Professor();
        professor.setId( resultSet.getLong( "id" ) );
        professor.setDepartmentId( resultSet.getLong( "department_id" ) );
        professor.setGrade( resultSet.getString( "grade" ) );
        return professor;
    }

}
