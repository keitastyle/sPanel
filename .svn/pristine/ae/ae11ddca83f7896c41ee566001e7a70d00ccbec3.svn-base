package com.spanel.dao;

import com.spanel.beans.Affectation;
import com.spanel.beans.Class;
import com.spanel.beans.Module;
import com.spanel.beans.User;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import static com.spanel.dao.DAOUtilitary.initPreparedStatement;
import static com.spanel.dao.DAOUtilitary.silentClose;

/**
 * Created by koyre on 28/12/16.
 */
public  class AffectationDAOImpl implements AffectationDAO {

    private static final String SQL_INSERT =
            "INSERT INTO affectations(professor_id,class_module_id,course_id,hours,coefficient) " +
            "VALUES(?,(" +
                    "SELECT id FROM class_module WHERE class_id = ? AND module_id = ?" +
                    "),?,?,?) ";
    private static final String SQL_FIND_ALL_BY_CLASS_ID_AND_MODULE_ID =
            "SELECT affectations.id,professor_id,class_id, module_id,course_id,hours,coefficient " +
            "FROM affectations, class_module " +
            "WHERE class_module_id = class_module.id AND class_module.class_id = ? AND class_module.module_id = ?";

    private DAOFactory daoFactory;

    public AffectationDAOImpl(DAOFactory daoFactory) { this.daoFactory = daoFactory;}

    @Override
    public void create(Affectation affectation) throws DAOException {
        Connection connection=null;
        PreparedStatement preparedStatement=null;
        ResultSet AutoGeneratedValue=null;
        try {
            connection= daoFactory.getConnection();
            preparedStatement=initPreparedStatement( connection, SQL_INSERT, true,affectation.getProfessorId(),affectation.getClassId(), affectation.getModuleId(), affectation.getCourseId(),affectation.getHours(),affectation.getCoefficient());
            int status=preparedStatement.executeUpdate();
            if (status==0){
                throw new DAOException("Erreur lors de l'affetation, aucune nouvelle ligne n'a été ajoutée !");
            }
            AutoGeneratedValue=preparedStatement.getGeneratedKeys();
            if(AutoGeneratedValue.next()){
                affectation.setId(AutoGeneratedValue.getLong(1));
            }else {
                throw new DAOException("Failed to create Course in database,No id auto generated value");
            }
        }catch(SQLException e){
            throw new DAOException(e);
        }finally {
            silentClose(preparedStatement);
            silentClose(AutoGeneratedValue);
            silentClose(connection);
        }

    }

    @Override
    public List<Affectation> findAll(Long classId, Long moduleId) throws DAOException {
        return findMany(SQL_FIND_ALL_BY_CLASS_ID_AND_MODULE_ID, classId, moduleId);
    }

    private Affectation find(String sql, Object... objects ) throws DAOException{

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        Affectation affectation = null;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement( connection, sql, false, objects );
            resultSet = preparedStatement.executeQuery();
            if ( resultSet.next() ) {
                affectation = map(resultSet);
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            silentClose( resultSet, preparedStatement, connection );
        }
        return affectation;
    }

    public List<Affectation> findMany(String sql, Object... objects) throws DAOException{
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        List<Affectation> affectations = new ArrayList<>();

        try{
            connection=daoFactory.getConnection();
            preparedStatement=initPreparedStatement(connection,sql,false,objects);
            resultSet=preparedStatement.executeQuery();
            while(resultSet.next()){
                affectations.add(map(resultSet));
            }
        }catch(SQLException e){
            throw new DAOException(e);
        }finally {
            silentClose(resultSet,preparedStatement,connection);
        }

        return affectations;
    }

    public static Affectation map(ResultSet resultSet) throws SQLException{
        Affectation affectation = new Affectation();
        affectation.setId(resultSet.getLong("id"));
        affectation.setProfessorId(resultSet.getLong("professor_id"));
        affectation.setClassId(resultSet.getLong("class_id"));
        affectation.setModuleId(resultSet.getLong("module_id"));
        affectation.setCourseId(resultSet.getLong("course_id"));
        affectation.setHours(resultSet.getLong("hours"));
        affectation.setCoefficient(resultSet.getLong("coefficient"));
        return affectation;
    }
}
