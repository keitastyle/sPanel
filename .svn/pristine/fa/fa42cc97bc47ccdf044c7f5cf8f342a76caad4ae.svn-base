package com.spanel.dao;

import com.spanel.beans.Announce;
import com.spanel.beans.User;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import static com.spanel.dao.DAOUtilitary.initPreparedStatement;
import static com.spanel.dao.DAOUtilitary.silentClose;

/**
 * Created by koria on 21/12/2016.
 */
public class AnnounceDAOImpl implements AnnounceDAO {
    private static final String SQL_INSERT = "INSERT INTO announces(class_id, author_id,title,type,description,date) VALUES(?,?,?,?,?,?)";
    private static final String SQL_FIND_ALL = "SELECT * FROM announces";
    private static final String SQL_FIND_CLASSES_ANNOUNCES = "SELECT class_id, author_id, title, type, description,date FROM announces WHERE classes_id=?";

    private DAOFactory daoFactory;

    public AnnounceDAOImpl(DAOFactory daoFactory) {
        this.daoFactory = daoFactory;
    }

    @Override
    public void create(Announce announce) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet AutoGeneratedValue = null;
        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(connection, SQL_INSERT, true, announce.getClassId(), announce.getAuthorId(), announce.getTitle(), announce.getType(), announce.getDescription(), announce.getDate());
            int status = preparedStatement.executeUpdate();
            if (status == 0) {
                throw new DAOException("Erreur lors de la création de l'announce, aucune nouvelle ligne n'a été ajoutée !");
            }
            AutoGeneratedValue = preparedStatement.getGeneratedKeys();
            if (AutoGeneratedValue.next()) {
                announce.setId(AutoGeneratedValue.getLong(1));
            } else {
                throw new DAOException("Echec de la création du classroom");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClose(preparedStatement);
            silentClose(AutoGeneratedValue);
            silentClose(connection);
        }
    }


    @Override
    public void update(Long id) throws DAOException {

    }

    @Override
    public Class find(Long id) throws DAOException {
        return null;
    }

    @Override
    public List<Announce> findAll() throws DAOException {
        return findMany(SQL_FIND_ALL);
    }

    @Override
    public List<Announce> findAll(User user) throws DAOException {
        return null;
    }

    @Override
    public List<Announce> findAll(Long class_id) throws DAOException {
        return findMany(SQL_FIND_CLASSES_ANNOUNCES,class_id);
    }

    @Override
    public Announce findByTitle(String Announce) {
        return null;
    }
    private Announce find(String sql, Objects... objects) throws DAOException{
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        Announce announce = new Announce();
        try {
            connection = daoFactory.getConnection();
            statement = initPreparedStatement(connection,sql,false,objects);
            resultSet = statement.executeQuery();
            while (resultSet.next()){
                announce = map(resultSet);
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            silentClose(resultSet,statement,connection);
        }
        return announce;
    }

    private List<Announce> findMany(String sql, Object... objects) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        List<Announce> announce = new ArrayList<>();

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(connection, sql, false, objects);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                announce.add(map(resultSet));
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClose(resultSet, preparedStatement, connection);
        }

        return announce;

    }

    public static Announce map(ResultSet resultSet) throws SQLException {
        Announce announce = new Announce();
        announce.setId(resultSet.getLong("id"));
        announce.setClassId(resultSet.getLong("class_id"));
        announce.setAuthorId(resultSet.getLong("author_id"));
        announce.setTitle(resultSet.getString("title"));
        announce.setType(resultSet.getString("type"));
        announce.setDescription(resultSet.getString("description"));
        announce.setDate(resultSet.getDate("date"));
        return announce;
    }
}
